" Set That Leader First
let mapleader=","

" ---------------------------------------------------------------------------
"  Miscellaneous
" ---------------------------------------------------------------------------
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
set autoread
set lazyredraw
set mouse=a " Enable moouse in all in all modes.
set nocompatible
set noerrorbells
set noswapfile
set ofu=syntaxcomplete#Complete " Set omni-completion method.
set showmode " Show the current mode.
set splitbelow " New window goes below
set splitright " New windows goes right
set suffixes=.bak,~,.swp,.swo,.o,.d,.info,.aux,.log,.dvi,.pdf,.bin,.bbl,.blg,.brf,.cb,.dmg,.exe,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyd,.dll
set term=builtin_ansi
set ttyfast
set wrapscan " Searches wrap around end of file
syntax on
" Speed up viewport scrolling
if has("autocmd")
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
\| exe "normal g'\"" | endif
endif

" " ----------------------------------------------------------------------------
" "  Text Formatting
" " ----------------------------------------------------------------------------
set autoindent " Copy indent from last line when starting new line.
set expandtab
set formatoptions+=c " Format comments
set formatoptions+=r " Continue comments by default
set formatoptions+=o " Make comment when using o or O from comment line
set formatoptions+=q " Format comments with gq
set formatoptions+=n " Recognize numbered lists
set formatoptions+=2 " Use indent from 2nd line of a paragraph
set formatoptions+=l " Don't break lines that are already long
set formatoptions+=1 " Break before 1-letter words
set hidden " When a buffer is brought to foreground, remember undo history and marks.
set list listchars=tab:\∴\ ,trail:·
set nosmarttab             " fuck tabs
set nowrap
set shiftwidth=2
set smartindent            " be smart about it
set softtabstop=2
set tabstop=2
set virtualedit=block      " allow virtual edit in visual block ..

" " ----------------------------------------------------------------------------
" " UI
" " ----------------------------------------------------------------------------
color solarized
map <Leader>l :set background=light<CR>
map <Leader>d :set background=dark<CR>
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set ch=2                       " command line height
set noshowcmd                  " don't display incomplete commands
set nolazyredraw               " turn off lazy redraw
set nostartofline              " don't jump to the start of line when scrolling
set number                     " line numbers
set report=0                   " tell us about changes
set ruler                      " show the cursor position all the time
set whichwrap+=<,>,h,l,[,]     " backspace and cursor keys wrap to
set wildignore+=*.o,*.obj,.git,*.rbc
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js,smarty/**,vendor/**,node_libraries/**,.git,.hg,.svn,.sass-cache,log,tmp,build,**/ckeditor/**
set wildmenu " Hitting TAB in command mode will show possible completions above command line.
set wildmode=list:longest,list:full

" " ----------------------------------------------------------------------------
" " Visual Cues
" " ----------------------------------------------------------------------------
set hlsearch
set ignorecase
set incsearch              " do incremental searching
set mat=5                  " duration to show matching brace (1/10 sec)
set showmatch              " brackets/braces that is
set smartcase
set visualbell             " shut the fuck up

" ---------------------------------------------------------------------------
"  Folding
" ---------------------------------------------------------------------------
set foldcolumn=4 " Column to show folds
set foldenable
set foldlevel=3
set foldmethod=syntax " Markers are used to specify folds.
set foldminlines=0 " Allow folding single lines
set foldnestmax=3 " Set max fold nesting level

" ---------------------------------------------------------------------------
"  Status Bar
" ---------------------------------------------------------------------------
set laststatus=2
set statusline=[%n]\ %<%.99f\ %h%w%m%r%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%y%=%-16(\ %l,%c-%v\ %)%P

" ---------------------------------------------------------------------------
"  Language
" ---------------------------------------------------------------------------
au BufRead,BufNewFile *.json set ft=json syntax=javascript " JSON
au BufRead,BufNewFile *.jade set ft=jade syntax=jade       " Jade
au BufRead,BufNewFile *.jst set syntax=jst                 " JST
au BufNewFile,BufRead *.less set filetype=less             " Less
" Common Ruby files
au BufRead,BufNewFile Rakefile,Capfile,Gemfile,.autotest,.irbrc,*.treetop,*.tt set ft=ruby syntax=ruby
" Markdown
augroup mkd
autocmd BufRead *.md  set ai formatoptions=tcroqn2 comments=n:>
autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:>
augroup END
" make and python use real tabs
au FileType make   set noexpandtab
au FileType python set noexpandtab
" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru}    set ft=ruby
" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()
au BufRead,BufNewFile *.txt call s:setupWrapping()

" ---------------------------------------------------------------------------
"  Functions
" ---------------------------------------------------------------------------
function s:setupWrapping()
set wrap
set wm=2
set textwidth=72
endfunction
function s:setupMarkup()
call s:setupWrapping()
map <buffer> <Leader>p :Mm <CR>
endfunction
function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction

" ---------------------------------------------------------------------------
"  Key Mappings
" ---------------------------------------------------------------------------
inoremap jj <ESC>
" Faster split resizing (+,-)
if bufwinnr(1)
map + <C-W>+
map - <C-W>-
endif
" Better split switching (Ctrl-j, Ctrl-k, Ctrl-h, Ctrl-l)
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l
" Buffer navigation (,,) (,]) (,[) (,ls)
map <Leader>, <C-^>
map <Leader>] :bnext<CR>
map <Leader>[ :bprev<CR>
map <Leader>ls :buffers<CR>
" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
" Save and load sessions
map <Leader>s :mks! ~/dev/vim/
map <Leader>ss :so ~/dev/vim/
" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>
" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv
" clear seach highlight
map <Leader>h :noh<CR>
map <Leader>s :call StripWhitespace ()<CR>
nnoremap Q gqap
vnoremap Q gq
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" ---------------------------------------------------------------------------
"  Plugin Config
" ---------------------------------------------------------------------------
" load pathogen bundles
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on

" NERDTree configuration
let NERDTreeIgnore=['\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>

" SuperTab
let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
let g:SuperTabCrMapping = 0
let g:SuperTabCompletionType = "context"
au BufEnter,BufRead,BufNewFile *.html,*.md,*.erb let g:SuperTabMappingForward = '<s-tab>'
au BufLeave *.html,*.erb let g:SuperTabMappingForward = '<tab>'

" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_quiet_warnings=1
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

